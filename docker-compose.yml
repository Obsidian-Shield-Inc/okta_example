version: '3.8'

services:
  db:
    image: postgres:15-alpine # Using PostgreSQL 15
    volumes:
      - postgres_data:/var/lib/postgresql/data/ # Persistent data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres} # Default to 'postgres' if not in .env
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme} # Default, change in .env
      - POSTGRES_DB=${POSTGRES_DB:-appdb} # Default, change in .env
    ports:
      - "${POSTGRES_PORT:-5432}:5432" # Expose port, configurable via .env
    networks:
      - app-network
    restart: unless-stopped
    healthcheck: # Added healthcheck for PostgreSQL
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-postgres} -d $${POSTGRES_DB:-appdb} -q"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s # Give it some time to start before first check

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-changeme}@db:5432/${POSTGRES_DB:-appdb}
      - OKTA_ISSUER=${OKTA_ISSUER}
      - OKTA_CLIENT_ID=${OKTA_CLIENT_ID}
    volumes:
      - ./app:/app
      - ./.env:/app/.env  # Mount the .env file directly into the container
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_OKTA_ISSUER=${OKTA_ISSUER}
      - REACT_APP_OKTA_CLIENT_ID=${OKTA_CLIENT_ID}
    volumes:
      - ./client:/app
      - /app/node_modules
      - ./.env:/app/.env  # Mount the .env file directly into the container
    depends_on:
      - backend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: # Define the named volume for data persistence 